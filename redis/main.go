package main

import (
	"encoding/json"
	"fmt"
	"github.com/go-redis/redis"
	"io"
	"log"
	"net/http"
	"sync"
	"sync/atomic"
)

type AutoGenerated struct {
	Code  int    `json:"code"`
	ID    string `json:"id"`
	State bool   `json:"state"`
}

var (
	count int32
)

func Compress(wg *sync.WaitGroup, i int) {
	res, err := http.Get("http://localhost/12")
	if err != nil {
		log.Println(err)
	}
	defer res.Body.Close()
	fmt.Println(i, "enter")
	data, _ := io.ReadAll(res.Body)
	fmt.Println(i, "outer")
	prasejson := new(AutoGenerated)
	json.Unmarshal(data, prasejson)
	// fmt.Println(prasejson)
	if prasejson.Code == 200 {
		atomic.AddInt32(&count, 1)
	}
	wg.Done()
}

func get() {
	var wg sync.WaitGroup

	for i := 0; i < 100; i++ {
		wg.Add(1)
		go Compress(&wg, i)
		fmt.Println(i)

	}
	wg.Wait()
	fmt.Println("========", count)
}
func main() {
	//compent.SecKill()
	// for i:=0;i<10;i++{
	// 	code,err:=compent.SetOp("18898186026")
	// 	if err!=nil{
	// 		log.Println(err)
	// 	}
	// 	fmt.Println(code)
	// }

	client := redis.NewClient(&redis.Options{
		Addr: "42.193.190.143:6388",
		DB:   1,
	})
	cmd := client.Do("Set", 5, "北京")
	fmt.Println(cmd.String())
	fmt.Println(client.Get("5"))

}
